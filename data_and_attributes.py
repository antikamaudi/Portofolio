# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12NWhlQfgws5JnBbmnzN7yNymIccaXr1s
"""

import re
import numpy as np
import pandas as pd
import datetime as dt

"""
Created on Wed Mar 30 19:35:38 2022

@author: Antika Maudi Lanthasari
"""

def getData(**parameter) -> pd.DataFrame:
    #Get source path
    source = parameter.get('source')
    
    #Try to read data
    try:
        #Excel format
        if(re.findall('(\.xlsx?)$', source)):
            sheetname = parameter.get('sheet_name')
            if(sheetname is not None):
                data = pd.read_excel(source, sheet_name = sheetname) 
            else:
                data = pd.read_excel(source)
        #Separated value format
        elif(re.findall('(\..sv)$', source)):
            typeseparator = {'.csv' : ',' , '.tsv' : '\t', '.psv' : '|'}
            for formatfile, sep in typeseparator.items():
                if(re.findall(formatfile + '$', source) in source):
                    separator = sep
                    break
            data = read_tsv(source, sep = separator)
        #Table in HTML
        elif(re.findall('^(https?:)', source)):
            index = parameter.get('index')
            if(index is not None):
                data = pd.read_html(source)[index]
            else:
                data = pd.read_html(source)
    except:
        raise Exception("Sorry, file not found")
    
    return data

def adjustmentDataType(data : pd.DataFrame, mappingCol : dict) -> pd.DataFrame:
    for colname, coltype in mappingCol.items():
        if(re.findall('str|obj', coltype)):
            data[colname] = data[colname].astype('str')
        elif(re.findall('int', coltype)):
            data[colname] = data[colname].astype('int64')
        elif(re.findall('float|double', coltype)):
            data[colname] = data[colname].astype('float64')
        elif(re.findall('bool', coltype)):
            data[colname] = data[colname].astype('bool')
        elif(re.findall('timestamp|datetime', coltype)):
            conditions  = [data[colname].isnull(), data[colname] == '2013']
            choices     = [dt.datetime.now(), '2013-01-01 00:00:00',]
            data[colname] = np.select(conditions, choices, default = data[colname])
            data[colname] = pd.to_datetime(data[colname], errors='coerce')
    return data

def getAttribute(data : pd.DataFrame, colAtt : str, addAll : bool = False) -> list:
    attribute = data[colAtt].sort_values().unique().tolist()
    if(addAll):
        attribute.insert(0, 'All')
    return attribute

def getCountryCode() -> pd.DataFrame :
    url  = 'https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes'
    data = getData(source = url, index = 0)
    data.columns = [''.join(col) for col in data.columns.values]
    data = data.rename(columns = {'ISO 3166[1]Country name[5]' : 'country',
                                  'Unnamed: 1_level_0Official state name[6]' : 'countrynamedesc',
                                  'ISO 3166-1[2]Alpha-3 code[5]' : 'countrycode',
                                  'ISO 3166-1[2]Numeric code[5]' : 'countryid'})
    
    data = data[['countryid', 'countrycode', 'country', 'countrynamedesc']]
    data = data[data['countrycode'].str.len() <= 3].reset_index()
    conditions  = [data['countrycode'] == 'PRK',
                   data['countrycode'] == 'KOR']
    choices     = ['North Korea',
                   'South Korea']
    data['country'] = np.select(conditions, choices, default = data['country'])
    data['country'] = data['country'].str.replace('\(.*\)|\[.*\]', '', regex = True)
    data['country'] = data['country'].str.strip()
    
    data['country'] =  data['country'].str.replace(' of Great Britain and Northern Ireland', '')
    return data